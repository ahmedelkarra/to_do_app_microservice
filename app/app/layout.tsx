'use client'
import { Inter } from "next/font/google";
import "./globals.css";
import HeaderComponent from "@/components/HeaderComponent";
import FooterComponent from "@/components/FooterComponent";
import { useEffect, useState } from "react";
import IsChangeContext from "@/helper/IsChangeContext";
import IsUserContext from "@/helper/IsUserContext";
import UserInfoContext, { IUserInfoContext } from "@/helper/UserInfoContext";
import axiosForm from "@/utils/axiosForm";
import axiosToDo from "@/utils/axiosToDo";
import ToDoInfoContext, { IToDoInfoContext } from "@/helper/ToDoInfoContext";

const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [isChange, setIsChange] = useState<boolean>(false)
  const [isUser, setIsUser] = useState<boolean>(false)
  const [userInfo, setUserInfo] = useState<IUserInfoContext>({ id: 0, first_name: "", last_name: "", email: "", username: "", is_staff: false })
  const [toDoInfo, setToDoInfo] = useState<IToDoInfoContext[]>([])

  const handleUserInfo = async () => {
    try {
      const token = localStorage.getItem('token')
      const formData = (await axiosForm.get('/me', { headers: { Authorization: token } })).data as { message: IUserInfoContext }
      setUserInfo(formData.message)
      setIsUser(true)
    } catch (error) {
      const errorValue = error as { response: { data: { message: string } } }
      console.error(errorValue.response.data.message)
      setUserInfo({ id: 0, first_name: "", last_name: "", email: "", username: "", is_staff: false })
      setIsUser(false)
    }
  }

  const handleToDoInfo = async () => {
    try {
      const token = localStorage.getItem('token')
      const formData = (await axiosToDo.get('/todo', { headers: { Authorization: token } })).data as { message: IToDoInfoContext[] }
      setToDoInfo(formData.message)
      setIsUser(true)
    } catch (error) {
      const errorValue = error as { response: { data: { message: string } } }
      console.error(errorValue.response.data.message)
      setToDoInfo([])
      setIsUser(false)
    }
  }

  useEffect(() => {
    handleUserInfo()
    handleToDoInfo()
    setIsChange(false)
  }, [isChange])
  return (
    <html lang="en">
      <body className={`${inter.className} min-h-[100dvh] flex flex-col`}>
        <IsChangeContext.Provider value={{ isChange, setIsChange }}>
          <IsUserContext.Provider value={{ isUser, setIsUser }}>
            <UserInfoContext.Provider value={{ userInfo, setUserInfo }}>
              <HeaderComponent setIsChange={setIsChange} isUser={isUser} />
              <ToDoInfoContext.Provider value={{ toDoInfo, setToDoInfo }}>
                <div className="flex-grow">
                  {children}
                </div>
                <FooterComponent />
              </ToDoInfoContext.Provider>
            </UserInfoContext.Provider>
          </IsUserContext.Provider>
        </IsChangeContext.Provider>
      </body>
    </html>
  );
}
